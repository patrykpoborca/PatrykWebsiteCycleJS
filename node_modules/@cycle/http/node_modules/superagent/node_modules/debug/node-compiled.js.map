{"version":3,"sources":["node.js"],"names":[],"mappings":"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","file":"node-compiled.js","sourcesContent":["\n/**\n * Module dependencies.\n */\n\nvar tty = require('tty');\nvar util = require('util');\n\n/**\n * This is the Node.js implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = require('./debug');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\n\n/**\n * Colors.\n */\n\nexports.colors = [6, 2, 3, 4, 5, 1];\n\n/**\n * The file descriptor to write the `debug()` calls to.\n * Set the `DEBUG_FD` env variable to override with another value. i.e.:\n *\n *   $ DEBUG_FD=3 node script.js 3>debug.log\n */\n\nvar fd = parseInt(process.env.DEBUG_FD, 10) || 2;\nvar stream = 1 === fd ? process.stdout :\n             2 === fd ? process.stderr :\n             createWritableStdioStream(fd);\n\n/**\n * Is stdout a TTY? Colored output is enabled when `true`.\n */\n\nfunction useColors() {\n  var debugColors = (process.env.DEBUG_COLORS || '').trim().toLowerCase();\n  if (0 === debugColors.length) {\n    return tty.isatty(fd);\n  } else {\n    return '0' !== debugColors\n        && 'no' !== debugColors\n        && 'false' !== debugColors\n        && 'disabled' !== debugColors;\n  }\n}\n\n/**\n * Map %o to `util.inspect()`, since Node doesn't do that out of the box.\n */\n\nvar inspect = (4 === util.inspect.length ?\n  // node <= 0.8.x\n  function (v, colors) {\n    return util.inspect(v, void 0, void 0, colors);\n  } :\n  // node > 0.8.x\n  function (v, colors) {\n    return util.inspect(v, { colors: colors });\n  }\n);\n\nexports.formatters.o = function(v) {\n  return inspect(v, this.useColors)\n    .replace(/\\s*\\n\\s*/g, ' ');\n};\n\n/**\n * Adds ANSI color escape codes if enabled.\n *\n * @api public\n */\n\nfunction formatArgs() {\n  var args = arguments;\n  var useColors = this.useColors;\n  var name = this.namespace;\n\n  if (useColors) {\n    var c = this.color;\n\n    args[0] = '  \\u001b[3' + c + ';1m' + name + ' '\n      + '\\u001b[0m'\n      + args[0] + '\\u001b[3' + c + 'm'\n      + ' +' + exports.humanize(this.diff) + '\\u001b[0m';\n  } else {\n    args[0] = new Date().toUTCString()\n      + ' ' + name + ' ' + args[0];\n  }\n  return args;\n}\n\n/**\n * Invokes `console.error()` with the specified arguments.\n */\n\nfunction log() {\n  return stream.write(util.format.apply(this, arguments) + '\\n');\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  if (null == namespaces) {\n    // If you set a process.env field to null or undefined, it gets cast to the\n    // string 'null' or 'undefined'. Just delete instead.\n    delete process.env.DEBUG;\n  } else {\n    process.env.DEBUG = namespaces;\n  }\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  return process.env.DEBUG;\n}\n\n/**\n * Copied from `node/src/node.js`.\n *\n * XXX: It's lame that node doesn't expose this API out-of-the-box. It also\n * relies on the undocumented `tty_wrap.guessHandleType()` which is also lame.\n */\n\nfunction createWritableStdioStream (fd) {\n  var stream;\n  var tty_wrap = process.binding('tty_wrap');\n\n  // Note stream._type is used for test-module-load-list.js\n\n  switch (tty_wrap.guessHandleType(fd)) {\n    case 'TTY':\n      stream = new tty.WriteStream(fd);\n      stream._type = 'tty';\n\n      // Hack to have stream not keep the event loop alive.\n      // See https://github.com/joyent/node/issues/1726\n      if (stream._handle && stream._handle.unref) {\n        stream._handle.unref();\n      }\n      break;\n\n    case 'FILE':\n      var fs = require('fs');\n      stream = new fs.SyncWriteStream(fd, { autoClose: false });\n      stream._type = 'fs';\n      break;\n\n    case 'PIPE':\n    case 'TCP':\n      var net = require('net');\n      stream = new net.Socket({\n        fd: fd,\n        readable: false,\n        writable: true\n      });\n\n      // FIXME Should probably have an option in net.Socket to create a\n      // stream from an existing fd which is writable only. But for now\n      // we'll just add this hack and set the `readable` member to false.\n      // Test: ./node test/fixtures/echo.js < /etc/passwd\n      stream.readable = false;\n      stream.read = null;\n      stream._type = 'pipe';\n\n      // FIXME Hack to have stream not keep the event loop alive.\n      // See https://github.com/joyent/node/issues/1726\n      if (stream._handle && stream._handle.unref) {\n        stream._handle.unref();\n      }\n      break;\n\n    default:\n      // Probably an error on in uv_guess_handle()\n      throw new Error('Implement me. Unknown stream file type!');\n  }\n\n  // For supporting legacy API we put the FD here.\n  stream.fd = fd;\n\n  stream._isStdio = true;\n\n  return stream;\n}\n\n/**\n * Enable namespaces listed in `process.env.DEBUG` initially.\n */\n\nexports.enable(load());\n"]}