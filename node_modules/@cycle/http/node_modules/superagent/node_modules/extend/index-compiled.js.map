{"version":3,"sources":["index.js"],"names":[],"mappings":";;AAAA,IAAI,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC;AAC7C,IAAI,QAAQ,GAAG,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC;;AAEzC,SAAS,aAAa,CAAC,GAAG,EAAE;AAC3B,KAAI,CAAC,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,iBAAiB,IAAI,GAAG,CAAC,QAAQ,IAAI,GAAG,CAAC,WAAW,EACtF,OAAO,KAAK,CAAC;;AAEd,KAAI,mBAAmB,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;AAC1D,KAAI,yBAAyB,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;;AAExF,KAAI,GAAG,CAAC,WAAW,IAAI,CAAC,mBAAmB,IAAI,CAAC,yBAAyB,EACxE,OAAO,KAAK,CAAC;;;;AAId,KAAI,GAAG,CAAC;AACR,MAAM,GAAG,IAAI,GAAG,EAAG,EAAE;;AAErB,QAAO,GAAG,KAAK,SAAS,IAAI,MAAM,CAAC,IAAI,CAAE,GAAG,EAAE,GAAG,CAAE,CAAC;CACpD,CAAC;;AAEF,MAAM,CAAC,OAAO,GAAG,SAAS,MAAM,GAAG;AAClC,KAAI,OAAO;KAAE,IAAI;KAAE,GAAG;KAAE,IAAI;KAAE,WAAW;KAAE,KAAK;KAC5C,MAAM,GAAG,SAAS,CAAC,CAAC,CAAC,IAAI,EAAE;KAC3B,CAAC,GAAG,CAAC;KACL,MAAM,GAAG,SAAS,CAAC,MAAM;KACzB,IAAI,GAAG,KAAK,CAAC;;;AAGjB,KAAK,OAAO,MAAM,KAAK,SAAS,EAAG;AAClC,MAAI,GAAG,MAAM,CAAC;AACd,QAAM,GAAG,SAAS,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;;AAE5B,GAAC,GAAG,CAAC,CAAC;EACN;;;AAGD,KAAK,OAAO,MAAM,KAAK,QAAQ,IAAI,OAAO,MAAM,KAAK,UAAU,EAAE;AAChE,QAAM,GAAG,EAAE,CAAC;EACZ;;AAED,QAAQ,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAG;;AAEzB,MAAK,CAAC,OAAO,GAAG,SAAS,CAAE,CAAC,CAAE,CAAA,IAAK,IAAI,EAAG;;AAEzC,QAAM,IAAI,IAAI,OAAO,EAAG;AACvB,OAAG,GAAG,MAAM,CAAE,IAAI,CAAE,CAAC;AACrB,QAAI,GAAG,OAAO,CAAE,IAAI,CAAE,CAAC;;;AAGvB,QAAK,MAAM,KAAK,IAAI,EAAG;AACtB,cAAS;KACT;;;AAGD,QAAK,IAAI,IAAI,IAAI,KAAM,aAAa,CAAC,IAAI,CAAC,KAAK,WAAW,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA,CAAC,AAAE,EAAG;AACrF,SAAK,WAAW,EAAG;AAClB,iBAAW,GAAG,KAAK,CAAC;AACpB,WAAK,GAAG,GAAG,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC;MAE7C,MAAM;AACN,WAAK,GAAG,GAAG,IAAI,aAAa,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC;MAC7C;;;AAGD,WAAM,CAAE,IAAI,CAAE,GAAG,MAAM,CAAE,IAAI,EAAE,KAAK,EAAE,IAAI,CAAE,CAAC;;;KAG7C,MAAM,IAAK,IAAI,KAAK,SAAS,EAAG;AAChC,YAAM,CAAE,IAAI,CAAE,GAAG,IAAI,CAAC;MACtB;IACD;GACD;EACD;;;AAGD,QAAO,MAAM,CAAC;CACd,CAAC","file":"index-compiled.js","sourcesContent":["var hasOwn = Object.prototype.hasOwnProperty;\nvar toString = Object.prototype.toString;\n\nfunction isPlainObject(obj) {\n\tif (!obj || toString.call(obj) !== '[object Object]' || obj.nodeType || obj.setInterval)\n\t\treturn false;\n\n\tvar has_own_constructor = hasOwn.call(obj, 'constructor');\n\tvar has_is_property_of_method = hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !has_own_constructor && !has_is_property_of_method)\n\t\treturn false;\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor ( key in obj ) {}\n\n\treturn key === undefined || hasOwn.call( obj, key );\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t    target = arguments[0] || {},\n\t    i = 1,\n\t    length = arguments.length,\n\t    deep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && typeof target !== \"function\") {\n\t\ttarget = {};\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\t\t// Only deal with non-null/undefined values\n\t\tif ( (options = arguments[ i ]) != null ) {\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tsrc = target[ name ];\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( isPlainObject(copy) || (copyIsArray = Array.isArray(copy)) ) ) {\n\t\t\t\t\tif ( copyIsArray ) {\n\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\tclone = src && Array.isArray(src) ? src : [];\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t}\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n"]}