{"version":3,"sources":["test-delayed-stream.js"],"names":[],"mappings":";;AAAA,IAAI,MAAM,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AAClC,IAAI,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;AAC3B,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;AAChC,IAAI,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;AACzC,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC;;AAEtC,CAAC,SAAS,0BAA0B,GAAG;AACrC,MAAI,MAAM,GAAG,IAAI,MAAM,EAAE,CAAC;AAC1B,MAAI,aAAa,GAAG,aAAa,CAAC,MAAM,CAAC,MAAM,EAAE,EAAC,WAAW,EAAE,KAAK,EAAC,CAAC,CAAC;;;AAGvE,MAAI,CAAC,MAAM,CAAC,aAAa,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;;;AAGtC,MAAI,MAAM,GAAG,EAAE,CAAC;AAChB,QAAM,CAAC,EAAE,CAAC,KAAK,EAAE,UAAS,KAAK,EAAE;AAC/B,UAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;GACpB,CAAC,CAAC;;AAEH,QAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;AACtB,QAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;;;AAGtB,QAAM,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACjC,MAAI,CAAC,MAAM,EAAE,CAAC;;;AAGd,MAAI,CACD,IAAI,CAAC,aAAa,EAAE,MAAM,CAAC,CAC3B,KAAK,CAAC,QAAQ,CAAC,CACf,OAAO,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;AAC7B,MAAI,CAAC,MAAM,CAAC,aAAa,EAAE,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;AAC/C,MAAI,CAAC,MAAM,CAAC,aAAa,EAAE,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;AAC/C,MAAI,CAAC,MAAM,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;;AAE9B,eAAa,CAAC,MAAM,EAAE,CAAC;AACvB,MAAI,CAAC,MAAM,EAAE,CAAC;;;AAGd,MAAI,CAAC,MAAM,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;AAC9B,eAAa,CAAC,MAAM,EAAE,CAAC;AACvB,MAAI,CAAC,MAAM,EAAE,CAAC;;;AAGd,MAAI,CAAC,MAAM,CAAC,aAAa,EAAE,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;AAC/C,QAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;AACtB,MAAI,CAAC,MAAM,EAAE,CAAC;CACf,CAAA,EAAG,CAAC","file":"test-delayed-stream-compiled.js","sourcesContent":["var common = require('../common');\nvar assert = common.assert;\nvar fake = common.fake.create();\nvar DelayedStream = common.DelayedStream;\nvar Stream = require('stream').Stream;\n\n(function testDelayEventsUntilResume() {\n  var source = new Stream();\n  var delayedStream = DelayedStream.create(source, {pauseStream: false});\n\n  // delayedStream must not emit until we resume\n  fake.expect(delayedStream, 'emit', 0);\n\n  // but our original source must emit\n  var params = [];\n  source.on('foo', function(param) {\n    params.push(param);\n  });\n\n  source.emit('foo', 1);\n  source.emit('foo', 2);\n\n  // Make sure delayedStream did not emit, and source did\n  assert.deepEqual(params, [1, 2]);\n  fake.verify();\n\n  // After resume, delayedStream must playback all events\n  fake\n    .stub(delayedStream, 'emit')\n    .times(Infinity)\n    .withArg(1, 'newListener');\n  fake.expect(delayedStream, 'emit', ['foo', 1]);\n  fake.expect(delayedStream, 'emit', ['foo', 2]);\n  fake.expect(source, 'resume');\n\n  delayedStream.resume();\n  fake.verify();\n\n  // Calling resume again will delegate to source\n  fake.expect(source, 'resume');\n  delayedStream.resume();\n  fake.verify();\n\n  // Emitting more events directly leads to them being emitted\n  fake.expect(delayedStream, 'emit', ['foo', 3]);\n  source.emit('foo', 3);\n  fake.verify();\n})();\n"]}