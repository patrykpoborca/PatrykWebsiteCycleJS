{"version":3,"sources":["test-handle-source-errors.js"],"names":[],"mappings":";;AAAA,IAAI,MAAM,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AAClC,IAAI,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;AAC3B,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;AAChC,IAAI,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;AACzC,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC;;AAEtC,CAAC,SAAS,sBAAsB,GAAG;AACjC,MAAI,MAAM,GAAG,IAAI,MAAM,EAAE,CAAC;AAC1B,MAAI,aAAa,GAAG,aAAa,CAAC,MAAM,CAAC,MAAM,EAAE,EAAC,WAAW,EAAE,KAAK,EAAC,CAAC,CAAC;;;;;AAKvE,QAAM,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC,CAAC;CACzD,CAAA,EAAG,CAAC","file":"test-handle-source-errors-compiled.js","sourcesContent":["var common = require('../common');\nvar assert = common.assert;\nvar fake = common.fake.create();\nvar DelayedStream = common.DelayedStream;\nvar Stream = require('stream').Stream;\n\n(function testHandleSourceErrors() {\n  var source = new Stream();\n  var delayedStream = DelayedStream.create(source, {pauseStream: false});\n\n  // We deal with this by attaching a no-op listener to 'error' on the source\n  // when creating a new DelayedStream. This way error events on the source\n  // won't throw.\n  source.emit('error', new Error('something went wrong'));\n})();\n"]}