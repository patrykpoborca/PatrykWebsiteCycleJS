{"version":3,"sources":["bench-multipart-parser.js"],"names":[],"mappings":";;AAAA,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,OAAO,CAAC,gBAAgB,CAAC,CAAC;AAC1B,IAAI,eAAe,GAAG,OAAO,CAAC,yBAAyB,CAAC;IACpD,eAAe,GAAG,eAAe,CAAC,eAAe;IACjD,MAAM,GAAG,IAAI,eAAe,EAAE;IAC9B,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,MAAM;IACjC,QAAQ,GAAG,uDAAuD;IAClE,EAAE,GAAG,GAAG;IACR,MAAM,GAAG,qBAAqB,CAAC,QAAQ,EAAE,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC;IAC1D,SAAS,GACP,EAAE,SAAS,EAAE,CAAC,CAAC;AACb,SAAO,EAAE,CAAC,CAAC;AACX,aAAW,EAAE,CAAC,CAAC;AACf,aAAW,EAAE,CAAC,CAAC;AACf,UAAQ,EAAE,CAAC,CAAC;AACZ,KAAG,EAAE,CAAC,CAAC;CACR,CAAC;;AAGR,MAAM,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;AAClC,MAAM,CAAC,aAAa,GAAG,YAAW;AAChC,WAAS,CAAC,WAAW,EAAE,CAAC;CACzB,CAAC;;AAEF,MAAM,CAAC,aAAa,GAAG,YAAW;AAChC,WAAS,CAAC,WAAW,EAAE,CAAC;CACzB,CAAC;;AAEF,MAAM,CAAC,WAAW,GAAG,YAAW;AAC9B,WAAS,CAAC,SAAS,EAAE,CAAC;CACvB,CAAC;;AAEF,MAAM,CAAC,UAAU,GAAG,YAAW;AAC7B,WAAS,CAAC,QAAQ,EAAE,CAAC;CACtB,CAAC;;AAEF,MAAM,CAAC,SAAS,GAAG,YAAW;AAC5B,WAAS,CAAC,OAAO,EAAE,CAAC;CACrB,CAAC;;AAEF,MAAM,CAAC,KAAK,GAAG,YAAW;AACxB,WAAS,CAAC,GAAG,EAAE,CAAC;CACjB,CAAC;;AAEF,IAAI,KAAK,GAAG,CAAC,IAAI,IAAI,EAAE;IACnB,OAAO,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC;IAC9B,QAAQ,GAAG,CAAC,IAAI,IAAI,EAAA,GAAG,KAAK;IAC5B,QAAQ,GAAG,CAAC,EAAE,IAAI,QAAQ,GAAG,IAAI,CAAA,CAAC,CAAE,OAAO,CAAC,CAAC,CAAC,CAAC;;AAEnD,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAC,SAAS,CAAC,CAAC;;AAEhC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;;AAErC,SAAS,qBAAqB,CAAC,QAAQ,EAAE,IAAI,EAAE;AAC7C,MAAI,IAAI,GACF,IAAI,GAAC,QAAQ,GAAC,MAAM,GACpB,mDAAmD,GACnD,MAAM;MACR,IAAI,GAAG,QAAQ,GAAC,QAAQ,GAAC,QAAQ;MACjC,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC;;AAE9B,QAAM,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;AAC/B,QAAM,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,EAAE,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;AACzD,SAAO,MAAM,CAAC;CACf;;AAED,OAAO,CAAC,EAAE,CAAC,MAAM,EAAE,YAAW;AAC5B,OAAK,IAAI,CAAC,IAAI,SAAS,EAAE;AACvB,UAAM,CAAC,KAAK,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,GAAC,gBAAgB,GAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;GAChE;CACF,CAAC,CAAC","file":"bench-multipart-parser-compiled.js","sourcesContent":["var assert = require('assert');\nrequire('../test/common');\nvar multipartParser = require('../lib/multipart_parser'),\n    MultipartParser = multipartParser.MultipartParser,\n    parser = new MultipartParser(),\n    Buffer = require('buffer').Buffer,\n    boundary = '-----------------------------168072824752491622650073',\n    mb = 100,\n    buffer = createMultipartBuffer(boundary, mb * 1024 * 1024),\n    callbacks =\n      { partBegin: -1,\n        partEnd: -1,\n        headerField: -1,\n        headerValue: -1,\n        partData: -1,\n        end: -1,\n      };\n\n\nparser.initWithBoundary(boundary);\nparser.onHeaderField = function() {\n  callbacks.headerField++;\n};\n\nparser.onHeaderValue = function() {\n  callbacks.headerValue++;\n};\n\nparser.onPartBegin = function() {\n  callbacks.partBegin++;\n};\n\nparser.onPartData = function() {\n  callbacks.partData++;\n};\n\nparser.onPartEnd = function() {\n  callbacks.partEnd++;\n};\n\nparser.onEnd = function() {\n  callbacks.end++;\n};\n\nvar start = +new Date(),\n    nparsed = parser.write(buffer),\n    duration = +new Date - start,\n    mbPerSec = (mb / (duration / 1000)).toFixed(2);\n\nconsole.log(mbPerSec+' mb/sec');\n\nassert.equal(nparsed, buffer.length);\n\nfunction createMultipartBuffer(boundary, size) {\n  var head =\n        '--'+boundary+'\\r\\n'\n      + 'content-disposition: form-data; name=\"field1\"\\r\\n'\n      + '\\r\\n'\n    , tail = '\\r\\n--'+boundary+'--\\r\\n'\n    , buffer = new Buffer(size);\n\n  buffer.write(head, 'ascii', 0);\n  buffer.write(tail, 'ascii', buffer.length - tail.length);\n  return buffer;\n}\n\nprocess.on('exit', function() {\n  for (var k in callbacks) {\n    assert.equal(0, callbacks[k], k+' count off by '+callbacks[k]);\n  }\n});\n"]}