{"version":3,"sources":["test-octet-stream.js"],"names":[],"mappings":";;AAAA,IAAI,MAAM,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AAClC,IAAI,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;AACnC,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC3B,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACvB,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC3B,IAAI,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AACjC,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;;AAE/B,IAAI,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,mCAAmC,CAAC,CAAC;;AAE7E,IAAI,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,UAAS,GAAG,EAAE,GAAG,EAAE;AAC9C,QAAI,IAAI,GAAG,IAAI,UAAU,CAAC,YAAY,EAAE,CAAC;;AAEzC,QAAI,CAAC,KAAK,CAAC,GAAG,EAAE,UAAS,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE;AACzC,cAAM,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;AACvC,YAAI,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;;AAEtB,cAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;;AAE7B,YAAI,QAAQ,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC1C,YAAI,QAAQ,GAAG,EAAE,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;;AAE7C,cAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;;AAErC,WAAG,CAAC,GAAG,EAAE,CAAC;AACV,cAAM,CAAC,KAAK,EAAE,CAAC;KAClB,CAAC,CAAC;CACN,CAAC,CAAC;;AAEH,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;;AAEvB,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,UAAS,GAAG,EAAC;AAC7B,UAAM,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;;AAExB,QAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;AACvB,YAAI,EAAE,IAAI;AACV,cAAM,EAAE,MAAM;AACd,eAAO,EAAE;AACL,0BAAc,EAAE,0BAA0B;SAC7C;KACJ,CAAC,CAAC;;AAEH,MAAE,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;CACnD,CAAC,CAAC","file":"test-octet-stream-compiled.js","sourcesContent":["var common = require('../common');\nvar formidable = common.formidable;\nvar http = require('http');\nvar fs = require('fs');\nvar path = require('path');\nvar hashish = require('hashish');\nvar assert = require('assert');\n\nvar testFilePath = path.join(__dirname, '../fixture/file/binaryfile.tar.gz');\n\nvar server = http.createServer(function(req, res) {\n    var form = new formidable.IncomingForm();\n\n    form.parse(req, function(err, fields, files) {\n        assert.equal(hashish(files).length, 1);\n        var file = files.file;\n\n        assert.equal(file.size, 301);\n\n        var uploaded = fs.readFileSync(file.path);\n        var original = fs.readFileSync(testFilePath);\n\n        assert.deepEqual(uploaded, original);\n\n        res.end();\n        server.close();\n    });\n});\n\nvar port = common.port;\n\nserver.listen(port, function(err){\n    assert.equal(err, null);\n\n    var request = http.request({\n        port: port,\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/octet-stream'\n        }\n    });\n\n    fs.createReadStream(testFilePath).pipe(request);\n});\n\n"]}