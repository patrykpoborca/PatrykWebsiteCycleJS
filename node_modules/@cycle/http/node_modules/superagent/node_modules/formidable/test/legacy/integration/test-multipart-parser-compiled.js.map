{"version":3,"sources":["test-multipart-parser.js"],"names":[],"mappings":"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","file":"test-multipart-parser-compiled.js","sourcesContent":["var common = require('../common');\nvar CHUNK_LENGTH = 10,\n    multipartParser = require(common.lib + '/multipart_parser'),\n    MultipartParser = multipartParser.MultipartParser,\n    parser = new MultipartParser(),\n    fixtures = require(TEST_FIXTURES + '/multipart'),\n    Buffer = require('buffer').Buffer;\n\nObject.keys(fixtures).forEach(function(name) {\n  var fixture = fixtures[name],\n      buffer = new Buffer(Buffer.byteLength(fixture.raw, 'binary')),\n      offset = 0,\n      chunk,\n      nparsed,\n\n      parts = [],\n      part = null,\n      headerField,\n      headerValue,\n      endCalled = '';\n\n  parser.initWithBoundary(fixture.boundary);\n  parser.onPartBegin = function() {\n    part = {headers: {}, data: ''};\n    parts.push(part);\n    headerField = '';\n    headerValue = '';\n  };\n\n  parser.onHeaderField = function(b, start, end) {\n    headerField += b.toString('ascii', start, end);\n  };\n\n  parser.onHeaderValue = function(b, start, end) {\n    headerValue += b.toString('ascii', start, end);\n  }\n\n  parser.onHeaderEnd = function() {\n    part.headers[headerField] = headerValue;\n    headerField = '';\n    headerValue = '';\n  };\n\n  parser.onPartData = function(b, start, end) {\n    var str = b.toString('ascii', start, end);\n    part.data += b.slice(start, end);\n  }\n\n  parser.onEnd = function() {\n    endCalled = true;\n  }\n\n  buffer.write(fixture.raw, 'binary', 0);\n\n  while (offset < buffer.length) {\n    if (offset + CHUNK_LENGTH < buffer.length) {\n      chunk = buffer.slice(offset, offset+CHUNK_LENGTH);\n    } else {\n      chunk = buffer.slice(offset, buffer.length);\n    }\n    offset = offset + CHUNK_LENGTH;\n\n    nparsed = parser.write(chunk);\n    if (nparsed != chunk.length) {\n      if (fixture.expectError) {\n        return;\n      }\n      puts('-- ERROR --');\n      p(chunk.toString('ascii'));\n      throw new Error(chunk.length+' bytes written, but only '+nparsed+' bytes parsed!');\n    }\n  }\n\n  if (fixture.expectError) {\n    throw new Error('expected parse error did not happen');\n  }\n\n  assert.ok(endCalled);\n  assert.deepEqual(parts, fixture.parts);\n});\n"]}