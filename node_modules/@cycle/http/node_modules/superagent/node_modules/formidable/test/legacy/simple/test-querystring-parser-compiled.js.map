{"version":3,"sources":["test-querystring-parser.js"],"names":[],"mappings":";;AAAA,IAAI,MAAM,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AAClC,IAAI,iBAAiB,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,GAAG,qBAAqB,CAAC,CAAC,iBAAiB;IACjF,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,MAAM;IACjC,MAAM;IACN,MAAM,CAAC;;AAEX,SAAS,IAAI,CAAC,IAAI,EAAE;AAClB,QAAM,GAAG,IAAI,MAAM,EAAE,CAAC;AACtB,QAAM,GAAG,IAAI,iBAAiB,EAAE,CAAC;AACjC,MAAI,EAAE,CAAC;AACP,QAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;CAC1B;;AAED,IAAI,CAAC,SAAS,WAAW,GAAG;AAC1B,QAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;AAChC,QAAM,CAAC,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC;CAC5D,CAAC,CAAC;;AAEH,IAAI,CAAC,SAAS,KAAK,GAAG;AACpB,MAAI,CAAC,GAAG,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC;AAC1B,QAAM,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;;AAExC,MAAI,CAAC,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC;AAC3B,QAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AAChB,QAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;CACpC,CAAC,CAAC;;AAEH,IAAI,CAAC,SAAS,GAAG,GAAG;AAClB,MAAI,MAAM,GAAG,EAAC,CAAC,EAAE,CAAC,GAAG,EAAE,EAAC,CAAC,EAAE,GAAG,EAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAC,CAAC;;AAE1C,QAAM,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,WAAW,EAAE,OAAO,EAAE,UAAS,GAAG,EAAE;AAChE,UAAM,CAAC,KAAK,CAAC,GAAG,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;AACjC,WAAO,MAAM,CAAC;GACf,CAAC,CAAC;;AAEH,QAAM,CAAC,MAAM,CAAC,MAAM,EAAE,SAAS,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,UAAS,GAAG,EAAE,GAAG,EAAE;AAC9E,UAAM,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;GACpC,CAAC,CAAC;;AAEH,QAAM,CAAC,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;;AAE/B,QAAM,CAAC,MAAM,GAAG,WAAW,CAAC;AAC5B,QAAM,CAAC,GAAG,EAAE,CAAC;AACb,QAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;CACjC,CAAC,CAAC","file":"test-querystring-parser-compiled.js","sourcesContent":["var common = require('../common');\nvar QuerystringParser = require(common.lib + '/querystring_parser').QuerystringParser,\n    Buffer = require('buffer').Buffer,\n    gently,\n    parser;\n\nfunction test(test) {\n  gently = new Gently();\n  parser = new QuerystringParser();\n  test();\n  gently.verify(test.name);\n}\n\ntest(function constructor() {\n  assert.equal(parser.buffer, '');\n  assert.equal(parser.constructor.name, 'QuerystringParser');\n});\n\ntest(function write() {\n  var a = new Buffer('a=1');\n  assert.equal(parser.write(a), a.length);\n\n  var b = new Buffer('&b=2');\n  parser.write(b);\n  assert.equal(parser.buffer, a + b);\n});\n\ntest(function end() {\n  var FIELDS = {a: ['b', {c: 'd'}], e: 'f'};\n\n  gently.expect(GENTLY.hijacked.querystring, 'parse', function(str) {\n    assert.equal(str, parser.buffer);\n    return FIELDS;\n  });\n\n  gently.expect(parser, 'onField', Object.keys(FIELDS).length, function(key, val) {\n    assert.deepEqual(FIELDS[key], val);\n  });\n\n  gently.expect(parser, 'onEnd');\n\n  parser.buffer = 'my buffer';\n  parser.end();\n  assert.equal(parser.buffer, '');\n});\n"]}