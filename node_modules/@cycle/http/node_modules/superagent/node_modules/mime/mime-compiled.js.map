{"version":3,"sources":["mime.js"],"names":[],"mappings":"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","file":"mime-compiled.js","sourcesContent":["var path = require('path');\nvar fs = require('fs');\n\nfunction Mime() {\n  // Map of extension -> mime type\n  this.types = Object.create(null);\n\n  // Map of mime type -> extension\n  this.extensions = Object.create(null);\n}\n\n/**\n * Define mimetype -> extension mappings.  Each key is a mime-type that maps\n * to an array of extensions associated with the type.  The first extension is\n * used as the default extension for the type.\n *\n * e.g. mime.define({'audio/ogg', ['oga', 'ogg', 'spx']});\n *\n * @param map (Object) type definitions\n */\nMime.prototype.define = function (map) {\n  for (var type in map) {\n    var exts = map[type];\n    for (var i = 0; i < exts.length; i++) {\n      if (process.env.DEBUG_MIME && this.types[exts]) {\n        console.warn(this._loading.replace(/.*\\//, ''), 'changes \"' + exts[i] + '\" extension type from ' +\n          this.types[exts] + ' to ' + type);\n      }\n\n      this.types[exts[i]] = type;\n    }\n\n    // Default extension is the first one we encounter\n    if (!this.extensions[type]) {\n      this.extensions[type] = exts[0];\n    }\n  }\n};\n\n/**\n * Load an Apache2-style \".types\" file\n *\n * This may be called multiple times (it's expected).  Where files declare\n * overlapping types/extensions, the last file wins.\n *\n * @param file (String) path of file to load.\n */\nMime.prototype.load = function(file) {\n  this._loading = file;\n  // Read file and split into lines\n  var map = {},\n      content = fs.readFileSync(file, 'ascii'),\n      lines = content.split(/[\\r\\n]+/);\n\n  lines.forEach(function(line) {\n    // Clean up whitespace/comments, and split into fields\n    var fields = line.replace(/\\s*#.*|^\\s*|\\s*$/g, '').split(/\\s+/);\n    map[fields.shift()] = fields;\n  });\n\n  this.define(map);\n\n  this._loading = null;\n};\n\n/**\n * Lookup a mime type based on extension\n */\nMime.prototype.lookup = function(path, fallback) {\n  var ext = path.replace(/.*[\\.\\/\\\\]/, '').toLowerCase();\n\n  return this.types[ext] || fallback || this.default_type;\n};\n\n/**\n * Return file extension associated with a mime type\n */\nMime.prototype.extension = function(mimeType) {\n  var type = mimeType.match(/^\\s*([^;\\s]*)(?:;|\\s|$)/)[1].toLowerCase();\n  return this.extensions[type];\n};\n\n// Default instance\nvar mime = new Mime();\n\n// Define built-in types\nmime.define(require('./types.json'));\n\n// Default type\nmime.default_type = mime.lookup('bin');\n\n//\n// Additional API specific to the default instance\n//\n\nmime.Mime = Mime;\n\n/**\n * Lookup a charset based on mime type.\n */\nmime.charsets = {\n  lookup: function(mimeType, fallback) {\n    // Assume text types are utf8\n    return (/^text\\//).test(mimeType) ? 'UTF-8' : fallback;\n  }\n};\n\nmodule.exports = mime;\n"]}