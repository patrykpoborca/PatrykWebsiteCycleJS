{"version":3,"sources":["index.js"],"names":[],"mappings":";;eAAuB,OAAO,iBAAiB;;IAA1C,cAAc,YAAd,cAAc;;AAEnB,MAAM,CAAC,OAAO,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8Cf,gBAAc,EAAd,cAAc;CACf,CAAA","file":"index-compiled.js","sourcesContent":["let {makeHTTPDriver} = require(`./http-driver`)\n\nmodule.exports = {\n  /**\n   * HTTP Driver factory.\n   *\n   * This is a function which, when called, returns a HTTP Driver for Cycle.js\n   * apps. The driver is also a function, and it takes an Observable of requests\n   * as input, and generates a metastream of responses.\n   *\n   * **Requests**. The Observable of requests should emit either strings or\n   * objects. If the Observable emits strings, those should be the URL of the\n   * remote resource over HTTP. If the Observable emits objects, these should be\n   * instructions how superagent should execute the request. These objects\n   * follow a structure similar to superagent's request API itself.\n   * `request` object properties:\n   *\n   * - `url` *(String)*: the remote resource path. **required**\n   * - `method` *(String)*: HTTP Method for the request (GET, POST, PUT, etc).\n   * - `query` *(Object)*: an object with the payload for `GET` or `POST`.\n   * - `send` *(Object)*: an object with the payload for `POST`.\n   * - `headers` *(Object)*: object specifying HTTP headers.\n   * - `accept` *(String)*: the Accept header.\n   * - `type` *(String)*: a short-hand for setting Content-Type.\n   * - `user` *(String)*: username for authentication.\n   * - `password` *(String)*: password for authentication.\n   * - `field` *(Object)*: object where key/values are Form fields.\n   * - `attach` *(Array)*: array of objects, where each object specifies `name`,\n   * `path`, and `filename` of a resource to upload.\n   * - `withCredentials` *(Boolean)*: enables the ability to send cookies from\n   * the origin.\n   * - `redirects` *(Number)*: number of redirects to follow.\n   *\n   * **Responses**. A metastream is an Observable of Observables. The response\n   * metastream emits Observables of responses. These Observables of responses\n   * have a `request` field attached to them (to the Observable object itself)\n   * indicating which request (from the driver input) generated this response\n   * Observable. The response Observables themselves emit the response object\n   * received through superagent.\n   *\n   * @param {Object} options an object with settings options that apply globally\n   * for all requests processed by the returned HTTP Driver function. The\n   * options are:\n   * - `autoSubscribe` *(Boolean)*: execute the HTTP eagerly, even if its\n   *   response Observable is not subscribed to. Default: **true**.\n   * @return {Function} the HTTP Driver function\n   * @function makeHTTPDriver\n   */\n  makeHTTPDriver,\n}\n"]}