{"version":3,"sources":["common.js"],"names":[],"mappings":"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","file":"common-compiled.js","sourcesContent":["'use strict';\n/* global describe, it */\nvar assert = require('assert');\nvar src = require('../lib/index');\nvar Cycle = require('@cycle/core');\nvar makeHTTPDriver = src.makeHTTPDriver;\nvar Rx = Cycle.Rx;\n\nfunction run(uri) {\n  describe('makeHTTPDriver', function () {\n    it('should be a driver factory', function () {\n      assert.strictEqual(typeof makeHTTPDriver, 'function');\n      var output = makeHTTPDriver();\n      assert.strictEqual(typeof output, 'function');\n    });\n  });\n\n  describe('HTTP Driver', function () {\n    it('should throw when request stream emits neither string nor object',\n      function(done) {\n        var request$ = Rx.Observable.just(123);\n        var httpDriver = makeHTTPDriver();\n        var response$$ = httpDriver(request$);\n        response$$.mergeAll().subscribe(\n          function onNext() { assert.fail(); },\n          function onError(err) {\n            assert.strictEqual(err.message, 'Observable of requests given to ' +\n              'HTTP Driver must emit either URL strings or objects with ' +\n              'parameters.'\n            );\n            done();\n          }\n        );\n      }\n    );\n\n    it('should throw when given options object without url string',\n      function(done) {\n        var request$ = Rx.Observable.just({method: 'post'});\n        var httpDriver = makeHTTPDriver();\n        var response$$ = httpDriver(request$);\n        response$$.mergeAll().subscribe(\n          function onNext() { assert.fail(); },\n          function onError(err) {\n            assert.strictEqual(\n              err.message, 'Please provide a `url` property in the request ' +\n              'options.'\n            );\n            done();\n          }\n        );\n      }\n    );\n\n    it('should return response metastream when given a simple URL string',\n      function(done) {\n        var request$ = Rx.Observable.just(uri + '/hello');\n        var httpDriver = makeHTTPDriver();\n        var response$$ = httpDriver(request$);\n        response$$.subscribe(function(response$) {\n          assert.strictEqual(response$.request, uri + '/hello');\n          response$.subscribe(function(response) {\n            assert.strictEqual(response.status, 200);\n            assert.strictEqual(response.text, 'Hello World');\n            done();\n          });\n        });\n      }\n    );\n\n    it('should return response metastream when given simple options obj',\n      function(done) {\n        var request$ = Rx.Observable.just({\n          url: uri + '/pet',\n          method: 'POST',\n          send: {name: 'Woof', species: 'Dog'}\n        });\n        var httpDriver = makeHTTPDriver();\n        var response$$ = httpDriver(request$);\n        response$$.subscribe(function(response$) {\n          assert.strictEqual(response$.request.url, uri + '/pet');\n          assert.strictEqual(response$.request.method, 'POST');\n          assert.strictEqual(response$.request.send.name, 'Woof');\n          assert.strictEqual(response$.request.send.species, 'Dog');\n          response$.subscribe(function(response) {\n            assert.strictEqual(response.status, 200);\n            assert.strictEqual(response.text, 'added Woof the Dog');\n            done();\n          });\n        });\n      }\n    );\n\n    it('should return response metastream when given another options obj',\n      function(done) {\n        var request$ = Rx.Observable.just({\n          url: uri + '/querystring',\n          method: 'GET',\n          query: {foo: 102030, bar: 'Pub'}\n        });\n        var httpDriver = makeHTTPDriver();\n        var response$$ = httpDriver(request$);\n        response$$.subscribe(function(response$) {\n          assert.strictEqual(response$.request.url, uri + '/querystring');\n          assert.strictEqual(response$.request.method, 'GET');\n          assert.strictEqual(response$.request.query.foo, 102030);\n          assert.strictEqual(response$.request.query.bar, 'Pub');\n          response$.subscribe(function(response) {\n            assert.strictEqual(response.status, 200);\n            assert.strictEqual(response.body.foo, '102030');\n            assert.strictEqual(response.body.bar, 'Pub');\n            done();\n          });\n        });\n      }\n    );\n\n    it('should send 500 server errors to response$ onError',\n      function(done) {\n        var request$ = Rx.Observable.just(uri + '/error');\n        var httpDriver = makeHTTPDriver();\n        var response$$ = httpDriver(request$);\n        response$$.subscribe(function(response$) {\n          assert.strictEqual(response$.request, uri + '/error');\n          response$.subscribe(\n            function onNext() { assert.fail(); },\n            function onError(err) {\n              assert.strictEqual(err.status, 500);\n              assert.strictEqual(err.message, 'Internal Server Error');\n              assert.strictEqual(err.response.text, 'boom');\n              done();\n            }\n          );\n        });\n      }\n    );\n\n  });\n}\n\nmodule.exports = run;\n"]}