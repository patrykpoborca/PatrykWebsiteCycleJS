{"version":3,"sources":["jquery.hammer.js"],"names":[],"mappings":";;AAAA,AAAC,CAAA,UAAS,OAAO,EAAE;AACf,QAAI,OAAO,MAAM,KAAK,UAAU,IAAI,MAAM,CAAC,GAAG,EAAE;AAC5C,cAAM,CAAC,CAAC,QAAQ,EAAE,UAAU,CAAC,EAAE,OAAO,CAAC,CAAC;KAC3C,MAAM,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;AACpC,eAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;KACnD,MAAM;AACH,eAAO,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;KAC3B;CACJ,CAAA,CAAC,UAAS,CAAC,EAAE,MAAM,EAAE;AAClB,aAAS,SAAS,CAAC,EAAE,EAAE,OAAO,EAAE;AAC5B,YAAI,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AAChB,YAAG,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;AACpB,eAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;SACnD;KACJ;;AAED,KAAC,CAAC,EAAE,CAAC,MAAM,GAAG,UAAS,OAAO,EAAE;AAC5B,eAAO,IAAI,CAAC,IAAI,CAAC,YAAW;AACxB,qBAAS,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;SAC5B,CAAC,CAAC;KACN,CAAC;;;AAGF,UAAM,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,GAAG,CAAC,UAAS,YAAY,EAAE;AACpD,eAAO,UAAS,IAAI,EAAE,IAAI,EAAE;AACxB,wBAAY,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;AACpC,aAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC;AACpB,oBAAI,EAAE,IAAI;AACV,uBAAO,EAAE,IAAI;aAChB,CAAC,CAAC;SACN,CAAC;KACL,CAAA,CAAE,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;CACrC,CAAC,CAAE","file":"jquery.hammer-compiled.js","sourcesContent":["(function(factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(['jquery', 'hammerjs'], factory);\n    } else if (typeof exports === 'object') {\n        factory(require('jquery'), require('hammerjs'));\n    } else {\n        factory(jQuery, Hammer);\n    }\n}(function($, Hammer) {\n    function hammerify(el, options) {\n        var $el = $(el);\n        if(!$el.data(\"hammer\")) {\n            $el.data(\"hammer\", new Hammer($el[0], options));\n        }\n    }\n\n    $.fn.hammer = function(options) {\n        return this.each(function() {\n            hammerify(this, options);\n        });\n    };\n\n    // extend the emit method to also trigger jQuery events\n    Hammer.Manager.prototype.emit = (function(originalEmit) {\n        return function(type, data) {\n            originalEmit.call(this, type, data);\n            $(this.element).trigger({\n                type: type,\n                gesture: data\n            });\n        };\n    })(Hammer.Manager.prototype.emit);\n}));\n"]}